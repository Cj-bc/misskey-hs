[[file:JA-README.org][日本語]]
* misskey-hs
A Haskell library for [[https://github.com/misskey-dev/misskey][misskey-dev/misskey]]'s API

* Usage
** As CLI tool
*** Prepare Config
Firstly, Please make config file at =$HOME/.config/misskey-hs/config.yaml= with format:

#+begin_src yaml
token: <your_token>
instance_url: <your_instance_url>
#+end_src

i.e. if you have token "MYTOKENHERE" and you're living in "misskey.io"

#+begin_src yaml
token: MYTOKENHERE
instance_url: misskey.io
#+end_src

*** Command usage
=stack run --= to call each API. Specify API by subcommand, and pass args by options.
=stack run -- --help= to more help.

*** Usage sample
#+begin_src sh
$ stack run -- users/show --username cj_bc_sd
[User {_user_id = ...}]
#+end_src

#+begin_example
$ stack run -- --help
Usage: misskey-hs-exe COMMAND
  call Misskey API

Available options:
  -h,--help                Show this help text

Available commands:
  users/show               call users/show API
  users/notes              call users/notes API
  users/search             call users/search API
  users                    call users API
#+end_example

** As Library
This package adds modules below:

| module                            | description                                                |
|-----------------------------------+------------------------------------------------------------|
| =Web.Misskey.Type=                | Provide types for general usage                            |
| =Web.Misskey.Api=                 | Expose all data types and =call= function                  |
| =Web.Misskey.Api.Internal=        | For internal usage                                         |
| =Web.Misskey.Api.Users.Show=      | API Request data types and instances for =users/show=      |
| =Web.Misskey.Api.Users.Search=    | API Request data types and instances for =users/search=    |
| =Web.Misskey.Api.Users.Notes=     | API Request data types and instances for =users/Notes=     |
| =Web.Misskey.Api.Users.Users=     | API Request data types and instances for =users=           |
| =Web.Misskey.Api.Users.Following= | API Request data types and instances for =users/following= |
| =Web.Misskey.Api.Users.Followers= | API Request data types and instances for =users/followers= |
| =Web.Misskey.Api.Notes.Create=    | API Request data types and instances for =notes/create=    |
| =Web.Misskey.Api.Notes.Timeline=  | API Request data types and instances for =notes/timeline=  |

*** Basic usage
API request is represented as one data type in =Web.Misskey.Api.*= 

All API-calling functions are placed in =Web.Misskey.Api.*=
You can pick one(e.g. =usersShow=), give it APIRequest(defined in each
module), and do =runMisskey= with =MisskeyEnv= to send API request.

e.g. Sending =users/show= API request to me(=cj_bc_sd@virtual-kaf.fun=),
and print result.

#+begin_src haskell :compile yes
  import Web.Misskey.Api (call, _UserName)
  import Control.Lens (re, (^.))
  import Web.Misskey.Type (MisskeyEnv(..))
  import RIO (runRIO)


  main :: IO ()
  main = do
      let env = MisskeyEnv Nothing                  -- A Misskey token. If you don't need it, put Nothing
                           "https://misskey.io"     -- Url which to send API request. You should include protocol too.
          req = ("cj_bc_sd", Nothing)^.re _UserName -- Create request for '/api/users/show' endpoint

      -- Post API Request and get result
      usr <- runRIO env $ call req
      print usr
#+end_src

See haddock and [[https://misskey-hub.net/docs/api/endpoints.html][api document in misskey-hub]](Currently lacks some data)
